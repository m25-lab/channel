// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgWithdrawHashlock } from "./types/channel/tx";
import { MsgAcceptfund } from "./types/channel/tx";
import { MsgCloseChannel } from "./types/channel/tx";
import { MsgOpenChannel } from "./types/channel/tx";
import { MsgSenderwithdrawhashlock } from "./types/channel/tx";
import { MsgReceivercommit } from "./types/channel/tx";
import { MsgReceiverwithdraw } from "./types/channel/tx";
import { MsgSendercommit } from "./types/channel/tx";
import { MsgCommitment } from "./types/channel/tx";
import { MsgWithdrawTimelock } from "./types/channel/tx";
import { MsgFund } from "./types/channel/tx";
import { MsgSenderwithdrawtimelock } from "./types/channel/tx";


export { MsgWithdrawHashlock, MsgAcceptfund, MsgCloseChannel, MsgOpenChannel, MsgSenderwithdrawhashlock, MsgReceivercommit, MsgReceiverwithdraw, MsgSendercommit, MsgCommitment, MsgWithdrawTimelock, MsgFund, MsgSenderwithdrawtimelock };

type sendMsgWithdrawHashlockParams = {
  value: MsgWithdrawHashlock,
  fee?: StdFee,
  memo?: string
};

type sendMsgAcceptfundParams = {
  value: MsgAcceptfund,
  fee?: StdFee,
  memo?: string
};

type sendMsgCloseChannelParams = {
  value: MsgCloseChannel,
  fee?: StdFee,
  memo?: string
};

type sendMsgOpenChannelParams = {
  value: MsgOpenChannel,
  fee?: StdFee,
  memo?: string
};

type sendMsgSenderwithdrawhashlockParams = {
  value: MsgSenderwithdrawhashlock,
  fee?: StdFee,
  memo?: string
};

type sendMsgReceivercommitParams = {
  value: MsgReceivercommit,
  fee?: StdFee,
  memo?: string
};

type sendMsgReceiverwithdrawParams = {
  value: MsgReceiverwithdraw,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendercommitParams = {
  value: MsgSendercommit,
  fee?: StdFee,
  memo?: string
};

type sendMsgCommitmentParams = {
  value: MsgCommitment,
  fee?: StdFee,
  memo?: string
};

type sendMsgWithdrawTimelockParams = {
  value: MsgWithdrawTimelock,
  fee?: StdFee,
  memo?: string
};

type sendMsgFundParams = {
  value: MsgFund,
  fee?: StdFee,
  memo?: string
};

type sendMsgSenderwithdrawtimelockParams = {
  value: MsgSenderwithdrawtimelock,
  fee?: StdFee,
  memo?: string
};


type msgWithdrawHashlockParams = {
  value: MsgWithdrawHashlock,
};

type msgAcceptfundParams = {
  value: MsgAcceptfund,
};

type msgCloseChannelParams = {
  value: MsgCloseChannel,
};

type msgOpenChannelParams = {
  value: MsgOpenChannel,
};

type msgSenderwithdrawhashlockParams = {
  value: MsgSenderwithdrawhashlock,
};

type msgReceivercommitParams = {
  value: MsgReceivercommit,
};

type msgReceiverwithdrawParams = {
  value: MsgReceiverwithdraw,
};

type msgSendercommitParams = {
  value: MsgSendercommit,
};

type msgCommitmentParams = {
  value: MsgCommitment,
};

type msgWithdrawTimelockParams = {
  value: MsgWithdrawTimelock,
};

type msgFundParams = {
  value: MsgFund,
};

type msgSenderwithdrawtimelockParams = {
  value: MsgSenderwithdrawtimelock,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgWithdrawHashlock({ value, fee, memo }: sendMsgWithdrawHashlockParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgWithdrawHashlock: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgWithdrawHashlock({ value: MsgWithdrawHashlock.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgWithdrawHashlock: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAcceptfund({ value, fee, memo }: sendMsgAcceptfundParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAcceptfund: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAcceptfund({ value: MsgAcceptfund.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAcceptfund: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCloseChannel({ value, fee, memo }: sendMsgCloseChannelParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCloseChannel: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCloseChannel({ value: MsgCloseChannel.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCloseChannel: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgOpenChannel({ value, fee, memo }: sendMsgOpenChannelParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgOpenChannel: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgOpenChannel({ value: MsgOpenChannel.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgOpenChannel: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSenderwithdrawhashlock({ value, fee, memo }: sendMsgSenderwithdrawhashlockParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSenderwithdrawhashlock: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSenderwithdrawhashlock({ value: MsgSenderwithdrawhashlock.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSenderwithdrawhashlock: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgReceivercommit({ value, fee, memo }: sendMsgReceivercommitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgReceivercommit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgReceivercommit({ value: MsgReceivercommit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgReceivercommit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgReceiverwithdraw({ value, fee, memo }: sendMsgReceiverwithdrawParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgReceiverwithdraw: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgReceiverwithdraw({ value: MsgReceiverwithdraw.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgReceiverwithdraw: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendercommit({ value, fee, memo }: sendMsgSendercommitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendercommit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendercommit({ value: MsgSendercommit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendercommit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCommitment({ value, fee, memo }: sendMsgCommitmentParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCommitment: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCommitment({ value: MsgCommitment.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCommitment: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgWithdrawTimelock({ value, fee, memo }: sendMsgWithdrawTimelockParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgWithdrawTimelock: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgWithdrawTimelock({ value: MsgWithdrawTimelock.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgWithdrawTimelock: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgFund({ value, fee, memo }: sendMsgFundParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgFund: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgFund({ value: MsgFund.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgFund: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSenderwithdrawtimelock({ value, fee, memo }: sendMsgSenderwithdrawtimelockParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSenderwithdrawtimelock: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSenderwithdrawtimelock({ value: MsgSenderwithdrawtimelock.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSenderwithdrawtimelock: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgWithdrawHashlock({ value }: msgWithdrawHashlockParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgWithdrawHashlock", value: MsgWithdrawHashlock.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgWithdrawHashlock: Could not create message: ' + e.message)
			}
		},
		
		msgAcceptfund({ value }: msgAcceptfundParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgAcceptfund", value: MsgAcceptfund.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAcceptfund: Could not create message: ' + e.message)
			}
		},
		
		msgCloseChannel({ value }: msgCloseChannelParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgCloseChannel", value: MsgCloseChannel.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCloseChannel: Could not create message: ' + e.message)
			}
		},
		
		msgOpenChannel({ value }: msgOpenChannelParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgOpenChannel", value: MsgOpenChannel.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgOpenChannel: Could not create message: ' + e.message)
			}
		},
		
		msgSenderwithdrawhashlock({ value }: msgSenderwithdrawhashlockParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgSenderwithdrawhashlock", value: MsgSenderwithdrawhashlock.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSenderwithdrawhashlock: Could not create message: ' + e.message)
			}
		},
		
		msgReceivercommit({ value }: msgReceivercommitParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgReceivercommit", value: MsgReceivercommit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgReceivercommit: Could not create message: ' + e.message)
			}
		},
		
		msgReceiverwithdraw({ value }: msgReceiverwithdrawParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgReceiverwithdraw", value: MsgReceiverwithdraw.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgReceiverwithdraw: Could not create message: ' + e.message)
			}
		},
		
		msgSendercommit({ value }: msgSendercommitParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgSendercommit", value: MsgSendercommit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendercommit: Could not create message: ' + e.message)
			}
		},
		
		msgCommitment({ value }: msgCommitmentParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgCommitment", value: MsgCommitment.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCommitment: Could not create message: ' + e.message)
			}
		},
		
		msgWithdrawTimelock({ value }: msgWithdrawTimelockParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgWithdrawTimelock", value: MsgWithdrawTimelock.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgWithdrawTimelock: Could not create message: ' + e.message)
			}
		},
		
		msgFund({ value }: msgFundParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgFund", value: MsgFund.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgFund: Could not create message: ' + e.message)
			}
		},
		
		msgSenderwithdrawtimelock({ value }: msgSenderwithdrawtimelockParams): EncodeObject {
			try {
				return { typeUrl: "/channel.channel.MsgSenderwithdrawtimelock", value: MsgSenderwithdrawtimelock.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSenderwithdrawtimelock: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			ChannelChannel: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;