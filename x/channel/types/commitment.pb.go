// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: channel/commitment.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Commitment struct {
	Index          string      `protobuf:"bytes,1,opt,name=Index,proto3" json:"Index,omitempty"`
	From           string      `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	CoinToCreator  *types.Coin `protobuf:"bytes,3,opt,name=CoinToCreator,proto3" json:"CoinToCreator,omitempty"`
	ToTimelockAddr string      `protobuf:"bytes,4,opt,name=ToTimelockAddr,proto3" json:"ToTimelockAddr,omitempty"`
	ToHashlockAddr string      `protobuf:"bytes,5,opt,name=ToHashlockAddr,proto3" json:"ToHashlockAddr,omitempty"`
	CoinToHtlc     *types.Coin `protobuf:"bytes,6,opt,name=CoinToHtlc,proto3" json:"CoinToHtlc,omitempty"`
	Timelock       uint64      `protobuf:"varint,7,opt,name=Timelock,proto3" json:"Timelock,omitempty"`
	Hashcode       string      `protobuf:"bytes,8,opt,name=Hashcode,proto3" json:"Hashcode,omitempty"`
	ChannelID      string      `protobuf:"bytes,9,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
}

func (m *Commitment) Reset()         { *m = Commitment{} }
func (m *Commitment) String() string { return proto.CompactTextString(m) }
func (*Commitment) ProtoMessage()    {}
func (*Commitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f017e3d8b1468c, []int{0}
}
func (m *Commitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitment.Merge(m, src)
}
func (m *Commitment) XXX_Size() int {
	return m.Size()
}
func (m *Commitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitment.DiscardUnknown(m)
}

var xxx_messageInfo_Commitment proto.InternalMessageInfo

func (m *Commitment) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Commitment) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Commitment) GetCoinToCreator() *types.Coin {
	if m != nil {
		return m.CoinToCreator
	}
	return nil
}

func (m *Commitment) GetToTimelockAddr() string {
	if m != nil {
		return m.ToTimelockAddr
	}
	return ""
}

func (m *Commitment) GetToHashlockAddr() string {
	if m != nil {
		return m.ToHashlockAddr
	}
	return ""
}

func (m *Commitment) GetCoinToHtlc() *types.Coin {
	if m != nil {
		return m.CoinToHtlc
	}
	return nil
}

func (m *Commitment) GetTimelock() uint64 {
	if m != nil {
		return m.Timelock
	}
	return 0
}

func (m *Commitment) GetHashcode() string {
	if m != nil {
		return m.Hashcode
	}
	return ""
}

func (m *Commitment) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func init() {
	proto.RegisterType((*Commitment)(nil), "channel.channel.Commitment")
}

func init() { proto.RegisterFile("channel/commitment.proto", fileDescriptor_e0f017e3d8b1468c) }

var fileDescriptor_e0f017e3d8b1468c = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4f, 0x02, 0x31,
	0x14, 0xc7, 0x29, 0x02, 0x42, 0x8d, 0x9a, 0x34, 0x0e, 0x95, 0x98, 0x86, 0x38, 0x18, 0x62, 0x62,
	0x2f, 0x60, 0x1c, 0x9c, 0x8c, 0x1e, 0x31, 0xb0, 0x12, 0x26, 0xb7, 0x5e, 0xaf, 0x91, 0x8b, 0xd7,
	0x3e, 0x72, 0x57, 0x0d, 0x7e, 0x0b, 0x3f, 0x96, 0x23, 0x23, 0xa3, 0x81, 0x2f, 0x62, 0xda, 0x83,
	0x13, 0x5d, 0x9c, 0xee, 0xbd, 0xff, 0xff, 0x7f, 0xef, 0xd7, 0xf6, 0x61, 0x2a, 0xa7, 0xc2, 0x18,
	0x95, 0x06, 0x12, 0xb4, 0x4e, 0xac, 0x56, 0xc6, 0xf2, 0x59, 0x06, 0x16, 0xc8, 0xf1, 0xc6, 0xe1,
	0x9b, 0x6f, 0x9b, 0x49, 0xc8, 0x35, 0xe4, 0x41, 0x24, 0x72, 0x15, 0xbc, 0xf5, 0x22, 0x65, 0x45,
	0x2f, 0x90, 0x90, 0x98, 0xe2, 0x87, 0xf3, 0x65, 0x15, 0xe3, 0xb0, 0x9c, 0x42, 0x4e, 0x70, 0x7d,
	0x64, 0x62, 0x35, 0xa7, 0xa8, 0x83, 0xba, 0xad, 0x71, 0xd1, 0x10, 0x82, 0x6b, 0x8f, 0x19, 0x68,
	0x5a, 0xf5, 0xa2, 0xaf, 0xc9, 0x1d, 0x3e, 0x0c, 0x21, 0x31, 0x13, 0x08, 0x33, 0x25, 0x2c, 0x64,
	0x74, 0xaf, 0x83, 0xba, 0x07, 0xfd, 0x53, 0x5e, 0x00, 0xb9, 0x03, 0xf2, 0x0d, 0x90, 0xbb, 0xe4,
	0xf8, 0x77, 0x9e, 0x5c, 0xe0, 0xa3, 0x09, 0x4c, 0x12, 0xad, 0x52, 0x90, 0x2f, 0xf7, 0x71, 0x9c,
	0xd1, 0x9a, 0x1f, 0xff, 0x47, 0x2d, 0x72, 0x43, 0x91, 0x4f, 0xcb, 0x5c, 0x7d, 0x9b, 0xdb, 0x55,
	0xc9, 0xad, 0xbb, 0x88, 0x03, 0x0c, 0x6d, 0x2a, 0x69, 0xe3, 0xbf, 0xd3, 0xec, 0x84, 0x49, 0x1b,
	0x37, 0xb7, 0x48, 0xba, 0xdf, 0x41, 0xdd, 0xda, 0xb8, 0xec, 0x9d, 0xe7, 0x30, 0x12, 0x62, 0x45,
	0x9b, 0x1e, 0x5c, 0xf6, 0xe4, 0x0c, 0xb7, 0xc2, 0xe2, 0x9d, 0x47, 0x03, 0xda, 0xf2, 0xe6, 0x8f,
	0xf0, 0x30, 0xf8, 0x5c, 0x31, 0xb4, 0x58, 0x31, 0xf4, 0xb5, 0x62, 0xe8, 0x63, 0xcd, 0x2a, 0x8b,
	0x35, 0xab, 0x2c, 0xd7, 0xac, 0xf2, 0x74, 0xf9, 0x9c, 0xd8, 0xe9, 0x6b, 0xc4, 0x25, 0xe8, 0x40,
	0xf7, 0x6f, 0xae, 0x52, 0x11, 0x05, 0xdb, 0x95, 0xce, 0xcb, 0xca, 0xbe, 0xcf, 0x54, 0x1e, 0x35,
	0xfc, 0x9e, 0xae, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x63, 0x42, 0xe1, 0xf4, 0x01, 0x00,
	0x00,
}

func (m *Commitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Hashcode) > 0 {
		i -= len(m.Hashcode)
		copy(dAtA[i:], m.Hashcode)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.Hashcode)))
		i--
		dAtA[i] = 0x42
	}
	if m.Timelock != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.Timelock))
		i--
		dAtA[i] = 0x38
	}
	if m.CoinToHtlc != nil {
		{
			size, err := m.CoinToHtlc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommitment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ToHashlockAddr) > 0 {
		i -= len(m.ToHashlockAddr)
		copy(dAtA[i:], m.ToHashlockAddr)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.ToHashlockAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ToTimelockAddr) > 0 {
		i -= len(m.ToTimelockAddr)
		copy(dAtA[i:], m.ToTimelockAddr)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.ToTimelockAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoinToCreator != nil {
		{
			size, err := m.CoinToCreator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommitment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommitment(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommitment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Commitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	if m.CoinToCreator != nil {
		l = m.CoinToCreator.Size()
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.ToTimelockAddr)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.ToHashlockAddr)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	if m.CoinToHtlc != nil {
		l = m.CoinToHtlc.Size()
		n += 1 + l + sovCommitment(uint64(l))
	}
	if m.Timelock != 0 {
		n += 1 + sovCommitment(uint64(m.Timelock))
	}
	l = len(m.Hashcode)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	return n
}

func sovCommitment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommitment(x uint64) (n int) {
	return sovCommitment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Commitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToCreator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinToCreator == nil {
				m.CoinToCreator = &types.Coin{}
			}
			if err := m.CoinToCreator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTimelockAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToTimelockAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHashlockAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToHashlockAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToHtlc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinToHtlc == nil {
				m.CoinToHtlc = &types.Coin{}
			}
			if err := m.CoinToHtlc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelock", wireType)
			}
			m.Timelock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timelock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommitment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommitment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommitment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommitment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommitment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommitment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommitment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommitment = fmt.Errorf("proto: unexpected end of group")
)
